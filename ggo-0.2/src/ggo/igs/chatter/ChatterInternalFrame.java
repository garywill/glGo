/*
 * ChatterInternalFrame.java
 *
 *  gGo
 *  Copyright (C) 2002  Peter Strempel <pstrempel@t-online.de>
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
package ggo.igs.chatter;

import java.beans.*;
import javax.swing.*;
import javax.swing.text.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import ggo.*;
import ggo.utils.sound.SoundHandler;
import ggo.gui.*;
import ggo.igs.IGSConnection;

/**
 * Internal frame inside the chatter pane, displaying the chat with one person.
 *
 * @author  Peter Strempel
 * @version $Revision: 1.3 $, $Date: 2002/09/21 12:39:56 $
 */
public class ChatterInternalFrame extends JInternalFrame implements Chatter {
    private String target;
    private ChatHandler chatHandler;

    /** Creates new form ChatterFrame */
    public ChatterInternalFrame(String target, String rank, ChatHandler chatHandler) {
        this.chatHandler = chatHandler;
        initComponents();
        setTarget(target);
        if (rank != null)
            setTitle(target + " [" + rank + "]");

        new HistoryScroller(inputField);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        javax.swing.JScrollPane outputScrollPane;
        javax.swing.JPanel buttonPanel;
        javax.swing.JButton clearButton;
        javax.swing.JPanel mainPanel;
        javax.swing.JButton closeButton;

        mainPanel = new javax.swing.JPanel();
        outputScrollPane = new javax.swing.JScrollPane();
        outputArea = new javax.swing.JTextArea();
        inputField = new javax.swing.JTextField();
        buttonPanel = new javax.swing.JPanel();
        targetButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();

        getContentPane().setLayout(new java.awt.BorderLayout(5, 5));

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        mainPanel.setLayout(new java.awt.BorderLayout());

        outputScrollPane.setPreferredSize(new java.awt.Dimension(400, 200));
        outputArea.setEditable(false);
        outputArea.setLineWrap(true);
        outputArea.setWrapStyleWord(true);
        outputArea.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5)));
        outputArea.setFont(new java.awt.Font("Serif", 0, chatHandler.getFontSize()));
        outputScrollPane.setViewportView(outputArea);

        mainPanel.add(outputScrollPane, java.awt.BorderLayout.CENTER);

        inputField.setFont(new Font("Sans Serif", 0, gGo.getSettings().getSansSerifFontSize()));
        inputField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputFieldActionPerformed(evt);
            }
        });

        mainPanel.add(inputField, java.awt.BorderLayout.SOUTH);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        buttonPanel.setLayout(new javax.swing.BoxLayout(buttonPanel, javax.swing.BoxLayout.X_AXIS));

        targetButton.setText("tweet");
        targetButton.setToolTipText(chatHandler.getIGSPlayerResources().getString("user_info_tooltip"));
        targetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showUserInfo(evt);
            }
        });

        buttonPanel.add(targetButton);

        buttonPanel.add(Box.createHorizontalGlue());
        clearButton.setText(chatHandler.getIGSPlayerResources().getString("Clear"));
        clearButton.setToolTipText(chatHandler.getIGSPlayerResources().getString("clear_tooltip"));
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(clearButton);

        closeButton.setText(chatHandler.getIGSPlayerResources().getString("Close"));
        closeButton.setToolTipText(chatHandler.getIGSPlayerResources().getString("close_window_tooltip"));
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(closeButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }//GEN-END:initComponents

    private void showUserInfo(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showUserInfo
        if (getTarget() != null && getTarget().length() > 0)
            chatHandler.requestUserInfo(getTarget());
    }//GEN-LAST:event_showUserInfo

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        closeFrame();
    }//GEN-LAST:event_formInternalFrameClosed

    private void inputFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputFieldActionPerformed
        String txt = inputField.getText();
        inputField.setText("");
        sendChat(getTarget(), txt, true);
    }//GEN-LAST:event_inputFieldActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        outputArea.setText("");
    }//GEN-LAST:event_clearButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        setVisible(false);
        dispose();
        closeFrame();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void closeFrame() {
        chatHandler.removeChat(target);
    }

    private void setTarget(String t) {
        target = t;
        targetButton.setText(target);
        setTitle(t);
    }

    public String getTarget() {
        return targetButton.getText();
    }

    public void sendChat(String target, String txt, boolean sendIt) {
        if (target == null || target.length() == 0 ||
        txt == null || txt.length() == 0)
            return;

        try {
            append(IGSConnection.getLoginName() + ": " + txt);
        } catch (NullPointerException e) {
            append("-> " + target + ": " + txt);
        }

        if (sendIt)
            chatHandler.sendChatToIGS(target, txt, this);

        checkVisible();
        setInputFocus();
    }

    public void recieveChat(String fromName, String txt) {
        append(fromName + ": " + txt);
        checkVisible();
        if (chatHandler.getPlaySound()) {
            SoundHandler.playIncomingChat();
        }
    }

    public void recieveChatError(String txt) {
        append(txt);
        checkVisible();
    }

    public void checkVisible() {
        try {
            // setSelected(true);
            setIcon(false);
        } catch (PropertyVetoException e) {
            System.err.println("ChatterInternalFrame.checkVisible() - Oops");
        }
        // moveToFront();
    }

    public void setInputFocus() {
        // --- 1.3 ---
        if (!gGo.is13())
            inputField.requestFocusInWindow();
        else
            inputField.requestFocus();
    }

    public void append(String txt) {
        outputArea.append(txt + "\n");

        SwingUtilities.invokeLater(
        new Runnable() {
            public void run() {
                try {
                    outputArea.scrollRectToVisible(outputArea.modelToView(
                    outputArea.getDocument().getLength()));
                } catch (BadLocationException e) {
                    System.err.println("Failed to scroll: " + e);
                }
            }
        });
    }

    void setFontSize(int size) {
        outputArea.setFont(new Font("Serif", 0, size));
    }

    public void changeFontSize() {
        outputArea.setFont(new Font("Serif", 0, gGo.getSettings().getSerifFontSize()));
        inputField.setFont(new Font("Sans Serif", 0, gGo.getSettings().getSansSerifFontSize()));
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea outputArea;
    private javax.swing.JButton targetButton;
    private javax.swing.JTextField inputField;
    // End of variables declaration//GEN-END:variables
}
