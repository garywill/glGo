/*
 * PlayerInfoDialog.java
 *
 *  gGo
 *  Copyright (C) 2002  Peter Strempel <pstrempel@t-online.de>
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
package ggo.igs.gui;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ResourceBundle;
import java.util.Hashtable;
import java.text.MessageFormat;
import ggo.gGo;
import ggo.igs.*;

/**
 *  Dialog to display user stats, results and stored games.
 *
 *@author     Peter Strempel
 *@version    $Revision: 1.18 $, $Date: 2002/10/26 00:49:29 $
 */
public class PlayerInfoDialog extends javax.swing.JDialog {
    private PlayerInfo playerInfo;
    private KeyHandler keyHandler;
    private static int frameCounter = 0;
    private int playsGame;
    private ResourceBundle igs_player_resources;
    private static Hashtable dialogHash;
    private boolean blockToggle;
    private StoredSGFTableModel storedTableModel, sgfTableModel;
    
    static {
        dialogHash = new Hashtable();
    }
    
    /** PlayerInfoDialog constructor */
    public PlayerInfoDialog(java.awt.Frame parent, boolean modal, PlayerInfo playerInfo) {
        super(parent, modal);
        this.playerInfo = playerInfo;
        keyHandler = new KeyHandler();
        playsGame = playerInfo.getPlayingGame();
        igs_player_resources = gGo.getIGSPlayerResources();
        
        storedTableModel = new StoredSGFTableModel();
        sgfTableModel = new StoredSGFTableModel();
        
        initComponents();
        
        // Init tables
        storedTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        storedTable.setCellSelectionEnabled(false);
        storedTable.addMouseListener(new StoredPopup(storedTable));
        sgfTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        sgfTable.setCellSelectionEnabled(false);
        sgfTable.addMouseListener(new SGFPopup(sgfTable));
        
        // This is somewhat ugly, but I did not figure how to do this in the netbeans automatically
        // generated code.
        if (!IGSConnection.getLoginName().equals(playerInfo.getName()))
            tabbedPane.remove(userPanel);
        else
            initUserDefs(playerInfo.getUserDefs());
        
        initSettings();
        toggleBozoStatus(IGSConnection.getMainWindow().getBozoHandler().getBozoStatus(playerInfo.getName()));
        
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        setLocation(
        (screenSize.width - getWidth()) / 2 + frameCounter * 20,
        (screenSize.height - getHeight()) / 2 + frameCounter * 20);
        frameCounter++;
        blockToggle = false;
        setVisible(true);
        
        dialogHash.put(playerInfo.getName(), this);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        javax.swing.JButton talkButton;
        javax.swing.JLabel defsSizeLabel;
        javax.swing.JLabel rankL;
        javax.swing.JPanel emailRightPanel;
        javax.swing.JPanel togglesPanel;
        javax.swing.JScrollPane sgfScrollPane;
        javax.swing.JButton notifyButton;
        javax.swing.JLabel regL;
        javax.swing.JPanel defsPanel;
        javax.swing.JPanel gamesPanel;
        javax.swing.JPanel infoLinePanel;
        javax.swing.JPanel namePanel;
        javax.swing.JLabel accessL;
        javax.swing.JLabel lossesL;
        javax.swing.JLabel nameL;
        javax.swing.JScrollPane resultsScrollPane;
        javax.swing.JButton defsApplyButton;
        javax.swing.JButton automatchButton;
        javax.swing.JLabel emailL;
        javax.swing.JLabel gameL;
        javax.swing.JPanel rankPanel;
        javax.swing.JPanel buttonPanel;
        javax.swing.JLabel defsBYSLabel;
        javax.swing.JButton messageButton;
        javax.swing.JPanel sgfPanel;
        javax.swing.JLabel infoL;
        javax.swing.JLabel languageL;
        javax.swing.JLabel ratingL;
        javax.swing.JLabel ratedGamesL;
        java.awt.GridBagConstraints gridBagConstraints;
        javax.swing.JLabel winsL;
        javax.swing.JScrollPane storedScrollPane;
        javax.swing.JLabel defsTimeLabel;
        javax.swing.JPanel statsPanel;
        javax.swing.JPanel storedPanel;
        javax.swing.JPanel storePanel;
        javax.swing.JLabel defsL;
        javax.swing.JPanel bozoPanel;
        javax.swing.JPanel storedSGFPanel;
        javax.swing.JButton refreshButton;
        javax.swing.JPanel emailPanel;
        javax.swing.JLabel storedL;
        javax.swing.JLabel defsBYLabel;
        javax.swing.JButton observeButton;
        javax.swing.JPanel gameStatsPanel;
        javax.swing.JButton matchButton;
        javax.swing.JPanel resultsPanel;
        javax.swing.JButton closeButton;
        javax.swing.JPanel emailLeftPanel;

        statusButtonGroup = new javax.swing.ButtonGroup();
        tabbedPane = new javax.swing.JTabbedPane();
        statsPanel = new javax.swing.JPanel();
        namePanel = new javax.swing.JPanel();
        nameL = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        gameL = new javax.swing.JLabel();
        gameLabel = new javax.swing.JLabel();
        languageL = new javax.swing.JLabel();
        languageLabel = new javax.swing.JLabel();
        rankPanel = new javax.swing.JPanel();
        ratingL = new javax.swing.JLabel();
        ratingLabel = new javax.swing.JLabel();
        rankL = new javax.swing.JLabel();
        rankLabel = new javax.swing.JLabel();
        storePanel = new javax.swing.JPanel();
        storedL = new javax.swing.JLabel();
        storedLabel = new javax.swing.JLabel();
        gameStatsPanel = new javax.swing.JPanel();
        ratedGamesL = new javax.swing.JLabel();
        ratedGamesLabel = new javax.swing.JLabel();
        winsL = new javax.swing.JLabel();
        winsLabel = new javax.swing.JLabel();
        lossesL = new javax.swing.JLabel();
        lossesLabel = new javax.swing.JLabel();
        emailPanel = new javax.swing.JPanel();
        emailLeftPanel = new javax.swing.JPanel();
        regL = new javax.swing.JLabel();
        accessL = new javax.swing.JLabel();
        emailL = new javax.swing.JLabel();
        emailRightPanel = new javax.swing.JPanel();
        regLabel = new javax.swing.JLabel();
        accessLabel = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        infoLinePanel = new javax.swing.JPanel();
        infoL = new javax.swing.JLabel();
        infoLabel = new javax.swing.JLabel();
        defsPanel = new javax.swing.JPanel();
        defsL = new javax.swing.JLabel();
        defsLabel = new javax.swing.JLabel();
        bozoPanel = new javax.swing.JPanel();
        friendRadioButton = new javax.swing.JRadioButton();
        neutralRadioButton = new javax.swing.JRadioButton();
        bozoRadioButton = new javax.swing.JRadioButton();
        gamesPanel = new javax.swing.JPanel();
        resultsPanel = new javax.swing.JPanel();
        resultsScrollPane = new javax.swing.JScrollPane();
        resultsTextArea = new javax.swing.JTextArea();
        storedSGFPanel = new javax.swing.JPanel();
        storedPanel = new javax.swing.JPanel();
        storedScrollPane = new javax.swing.JScrollPane();
        storedTable = new javax.swing.JTable();
        sgfPanel = new javax.swing.JPanel();
        sgfScrollPane = new javax.swing.JScrollPane();
        sgfTable = new javax.swing.JTable();
        userPanel = new javax.swing.JPanel();
        togglesPanel = new javax.swing.JPanel();
        openCheckBox = new javax.swing.JCheckBox();
        lookingCheckBox = new javax.swing.JCheckBox();
        quietCheckBox = new javax.swing.JCheckBox();
        shoutsCheckBox = new javax.swing.JCheckBox();
        kibitzCheckBox = new javax.swing.JCheckBox();
        chatterCheckBox = new javax.swing.JCheckBox();
        automailCheckBox = new javax.swing.JCheckBox();
        bellCheckBox = new javax.swing.JCheckBox();
        defaultsPanel = new javax.swing.JPanel();
        defsTimeLabel = new javax.swing.JLabel();
        defsTimeTextField = new javax.swing.JTextField();
        defsSizeLabel = new javax.swing.JLabel();
        defsSizeTextField = new javax.swing.JTextField();
        defsBYLabel = new javax.swing.JLabel();
        defsBYTextField = new javax.swing.JTextField();
        defsBYSLabel = new javax.swing.JLabel();
        defsBYSTextField = new javax.swing.JTextField();
        defsApplyButton = new javax.swing.JButton();
        buttonPanel = new javax.swing.JPanel();
        refreshButton = new javax.swing.JButton();
        buttonRightPanel = new javax.swing.JPanel();
        talkButton = new javax.swing.JButton();
        messageButton = new javax.swing.JButton();
        notifyButton = new javax.swing.JButton();
        observeButton = new javax.swing.JButton();
        trailButton = new javax.swing.JButton();
        matchButton = new javax.swing.JButton();
        automatchButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(MessageFormat.format(igs_player_resources.getString("dialog_title"), new Object[] {playerInfo.getName()}));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        tabbedPane.addKeyListener(keyHandler);
        statsPanel.setLayout(new java.awt.GridBagLayout());

        namePanel.setLayout(new java.awt.GridLayout(3, 2, 10, 3));

        namePanel.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.EtchedBorder(), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 6, 5, 6))));
        nameL.setText(igs_player_resources.getString("Name"));
        namePanel.add(nameL);

        namePanel.add(nameLabel);

        gameL.setText(igs_player_resources.getString("Game"));
        namePanel.add(gameL);

        namePanel.add(gameLabel);

        languageL.setText(igs_player_resources.getString("Language"));
        namePanel.add(languageL);

        namePanel.add(languageLabel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        statsPanel.add(namePanel, gridBagConstraints);

        rankPanel.setLayout(new java.awt.GridLayout(2, 2, 10, 3));

        rankPanel.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.EtchedBorder(), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 6, 5, 6))));
        ratingL.setText(igs_player_resources.getString("Rating"));
        rankPanel.add(ratingL);

        rankPanel.add(ratingLabel);

        rankL.setText(igs_player_resources.getString("Rank"));
        rankPanel.add(rankL);

        rankPanel.add(rankLabel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        statsPanel.add(rankPanel, gridBagConstraints);

        storePanel.setLayout(new java.awt.GridLayout(1, 2, 3, 3));

        storePanel.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.EtchedBorder(), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 6, 5, 6))));
        storedL.setText(igs_player_resources.getString("Stored"));
        storePanel.add(storedL);

        storedLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        storePanel.add(storedLabel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        statsPanel.add(storePanel, gridBagConstraints);

        gameStatsPanel.setLayout(new java.awt.GridBagLayout());

        gameStatsPanel.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.EtchedBorder(), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 6, 5, 6))));
        ratedGamesL.setText(igs_player_resources.getString("Rated_Games"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        gameStatsPanel.add(ratedGamesL, gridBagConstraints);

        ratedGamesLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        gameStatsPanel.add(ratedGamesLabel, gridBagConstraints);

        winsL.setText(igs_player_resources.getString("Wins"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        gameStatsPanel.add(winsL, gridBagConstraints);

        winsLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        gameStatsPanel.add(winsLabel, gridBagConstraints);

        lossesL.setText(igs_player_resources.getString("Losses"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        gameStatsPanel.add(lossesL, gridBagConstraints);

        lossesLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        gameStatsPanel.add(lossesLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        statsPanel.add(gameStatsPanel, gridBagConstraints);

        emailPanel.setLayout(new java.awt.BorderLayout(10, 3));

        emailPanel.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.EtchedBorder(), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 6, 5, 6))));
        emailLeftPanel.setLayout(new java.awt.GridLayout(3, 1, 3, 3));

        regL.setText(igs_player_resources.getString("Registered"));
        regL.setPreferredSize(new java.awt.Dimension(90, 16));
        emailLeftPanel.add(regL);

        accessL.setText(igs_player_resources.getString("Access"));
        accessL.setPreferredSize(new java.awt.Dimension(90, 16));
        emailLeftPanel.add(accessL);

        emailL.setText(igs_player_resources.getString("Email"));
        emailL.setPreferredSize(new java.awt.Dimension(90, 16));
        emailLeftPanel.add(emailL);

        emailPanel.add(emailLeftPanel, java.awt.BorderLayout.WEST);

        emailRightPanel.setLayout(new java.awt.GridLayout(3, 1, 3, 3));

        emailRightPanel.add(regLabel);

        emailRightPanel.add(accessLabel);

        emailRightPanel.add(emailLabel);

        emailPanel.add(emailRightPanel, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        statsPanel.add(emailPanel, gridBagConstraints);

        infoLinePanel.setLayout(new java.awt.BorderLayout(10, 3));

        infoLinePanel.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.EtchedBorder(), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 6, 5, 6))));
        infoL.setText(igs_player_resources.getString("Info"));
        infoL.setPreferredSize(new java.awt.Dimension(90, 16));
        infoLinePanel.add(infoL, java.awt.BorderLayout.WEST);

        infoLinePanel.add(infoLabel, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        statsPanel.add(infoLinePanel, gridBagConstraints);

        defsPanel.setLayout(new java.awt.BorderLayout(10, 3));

        defsPanel.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.EtchedBorder(), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 6, 5, 6))));
        defsL.setText(igs_player_resources.getString("Defaults"));
        defsL.setPreferredSize(new java.awt.Dimension(90, 16));
        defsPanel.add(defsL, java.awt.BorderLayout.WEST);

        defsPanel.add(defsLabel, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        statsPanel.add(defsPanel, gridBagConstraints);

        bozoPanel.setLayout(new javax.swing.BoxLayout(bozoPanel, javax.swing.BoxLayout.Y_AXIS));

        bozoPanel.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.EtchedBorder(), new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 6, 5, 6))));
        friendRadioButton.setText(gGo.getIGSBozoResources().getString("Friend"));
        statusButtonGroup.add(friendRadioButton);
        friendRadioButton.addKeyListener(keyHandler);
        friendRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                friendRadioButtonActionPerformed(evt);
            }
        });

        bozoPanel.add(friendRadioButton);

        neutralRadioButton.setText(gGo.getIGSBozoResources().getString("Neutral"));
        statusButtonGroup.add(neutralRadioButton);
        neutralRadioButton.addKeyListener(keyHandler);
        neutralRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                neutralRadioButtonActionPerformed(evt);
            }
        });

        bozoPanel.add(neutralRadioButton);

        bozoRadioButton.setText(gGo.getIGSBozoResources().getString("Ignore"));
        statusButtonGroup.add(bozoRadioButton);
        bozoRadioButton.addKeyListener(keyHandler);
        bozoRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bozoRadioButtonActionPerformed(evt);
            }
        });

        bozoPanel.add(bozoRadioButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        statsPanel.add(bozoPanel, gridBagConstraints);

        tabbedPane.addTab(igs_player_resources.getString("Stats"), statsPanel);

        gamesPanel.setLayout(new java.awt.GridLayout(2, 1));

        resultsPanel.setLayout(new java.awt.BorderLayout());

        resultsPanel.setBorder(new javax.swing.border.TitledBorder(MessageFormat.format(igs_player_resources.getString("Results"), new Object[] {})));
        resultsTextArea.setBackground((java.awt.Color) javax.swing.UIManager.getDefaults().get("Panel.background"));
        resultsTextArea.setEditable(false);
        resultsTextArea.setFont(new java.awt.Font("Monospaced", 0, 12));
        resultsScrollPane.setViewportView(resultsTextArea);

        resultsPanel.add(resultsScrollPane, java.awt.BorderLayout.CENTER);

        gamesPanel.add(resultsPanel);

        storedSGFPanel.setLayout(new javax.swing.BoxLayout(storedSGFPanel, javax.swing.BoxLayout.X_AXIS));

        storedPanel.setLayout(new java.awt.BorderLayout());

        storedPanel.setBorder(new javax.swing.border.TitledBorder(MessageFormat.format(igs_player_resources.getString("Stored_games"), new Object[] {})));
        storedTable.setModel(storedTableModel);
        storedScrollPane.setViewportView(storedTable);

        storedPanel.add(storedScrollPane, java.awt.BorderLayout.CENTER);

        storedSGFPanel.add(storedPanel);

        sgfPanel.setLayout(new java.awt.BorderLayout());

        sgfPanel.setBorder(new javax.swing.border.TitledBorder(MessageFormat.format(igs_player_resources.getString("SGF_games"), new Object[] {})));
        sgfTable.setModel(sgfTableModel);
        sgfScrollPane.setViewportView(sgfTable);

        sgfPanel.add(sgfScrollPane, java.awt.BorderLayout.CENTER);

        storedSGFPanel.add(sgfPanel);

        gamesPanel.add(storedSGFPanel);

        tabbedPane.addTab(igs_player_resources.getString("Games"), gamesPanel);

        userPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 20, 5));

        togglesPanel.setLayout(new javax.swing.BoxLayout(togglesPanel, javax.swing.BoxLayout.Y_AXIS));

        togglesPanel.setBorder(new javax.swing.border.TitledBorder("Toggles"));
        openCheckBox.setText("Open");
        openCheckBox.addKeyListener(keyHandler);
        openCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openCheckBoxActionPerformed(evt);
            }
        });

        togglesPanel.add(openCheckBox);

        lookingCheckBox.setText("Looking");
        lookingCheckBox.addKeyListener(keyHandler);
        lookingCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lookingCheckBoxActionPerformed(evt);
            }
        });

        togglesPanel.add(lookingCheckBox);

        quietCheckBox.setText("Quiet");
        quietCheckBox.addKeyListener(keyHandler);
        quietCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quietCheckBoxActionPerformed(evt);
            }
        });

        togglesPanel.add(quietCheckBox);

        shoutsCheckBox.setText("Shouts");
        shoutsCheckBox.addKeyListener(keyHandler);
        shoutsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shoutsCheckBoxActionPerformed(evt);
            }
        });

        togglesPanel.add(shoutsCheckBox);

        kibitzCheckBox.setText("Kibitz");
        kibitzCheckBox.addKeyListener(keyHandler);
        kibitzCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kibitzCheckBoxActionPerformed(evt);
            }
        });

        togglesPanel.add(kibitzCheckBox);

        chatterCheckBox.setText("Chatter");
        chatterCheckBox.addKeyListener(keyHandler);
        chatterCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chatterCheckBoxActionPerformed(evt);
            }
        });

        togglesPanel.add(chatterCheckBox);

        automailCheckBox.setText("Automail");
        automailCheckBox.addKeyListener(keyHandler);
        automailCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                automailCheckBoxActionPerformed(evt);
            }
        });

        togglesPanel.add(automailCheckBox);

        bellCheckBox.setText("Bell");
        bellCheckBox.addKeyListener(keyHandler);
        bellCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bellCheckBoxActionPerformed(evt);
            }
        });

        togglesPanel.add(bellCheckBox);

        userPanel.add(togglesPanel);

        defaultsPanel.setLayout(new java.awt.GridBagLayout());

        defaultsPanel.setBorder(new javax.swing.border.TitledBorder(igs_player_resources.getString("Defaults")));
        defsTimeLabel.setText(igs_player_resources.getString("Time"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        defaultsPanel.add(defsTimeLabel, gridBagConstraints);

        defsTimeTextField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        defsTimeTextField.setPreferredSize(new java.awt.Dimension(50, 20));
        defsTimeTextField.addKeyListener(keyHandler);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        defaultsPanel.add(defsTimeTextField, gridBagConstraints);

        defsSizeLabel.setText(igs_player_resources.getString("Size"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        defaultsPanel.add(defsSizeLabel, gridBagConstraints);

        defsSizeTextField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        defsSizeTextField.setPreferredSize(new java.awt.Dimension(50, 20));
        defsSizeTextField.addKeyListener(keyHandler);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        defaultsPanel.add(defsSizeTextField, gridBagConstraints);

        defsBYLabel.setText(igs_player_resources.getString("Byoyomi_time"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        defaultsPanel.add(defsBYLabel, gridBagConstraints);

        defsBYTextField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        defsBYTextField.setPreferredSize(new java.awt.Dimension(50, 20));
        defsBYTextField.addKeyListener(keyHandler);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        defaultsPanel.add(defsBYTextField, gridBagConstraints);

        defsBYSLabel.setText(igs_player_resources.getString("Byoyomi_stones"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        defaultsPanel.add(defsBYSLabel, gridBagConstraints);

        defsBYSTextField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        defsBYSTextField.setPreferredSize(new java.awt.Dimension(50, 20));
        defsBYSTextField.addKeyListener(keyHandler);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        defaultsPanel.add(defsBYSTextField, gridBagConstraints);

        defsApplyButton.setText(igs_player_resources.getString("apply_button"));
        defsApplyButton.setToolTipText(igs_player_resources.getString("apply_button_tooltip"));
        defsApplyButton.addKeyListener(keyHandler);
        defsApplyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defsApplyButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 5, 5);
        defaultsPanel.add(defsApplyButton, gridBagConstraints);

        userPanel.add(defaultsPanel);

        tabbedPane.addTab(igs_player_resources.getString("User"), userPanel);

        getContentPane().add(tabbedPane, java.awt.BorderLayout.CENTER);

        buttonPanel.setLayout(new javax.swing.BoxLayout(buttonPanel, javax.swing.BoxLayout.X_AXIS));

        refreshButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Refresh16.gif")));
        refreshButton.setToolTipText(igs_player_resources.getString("refresh_tooltip"));
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(refreshButton);

        buttonRightPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 2, 2));

        talkButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ComposeMail16.gif")));
        talkButton.setToolTipText(igs_player_resources.getString("talk_button_tooltip"));
        talkButton.addKeyListener(keyHandler);
        talkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                talkButtonActionPerformed(evt);
            }
        });

        buttonRightPanel.add(talkButton);

        messageButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/SendMail16.gif")));
        messageButton.setToolTipText(igs_player_resources.getString("message_tooltip"));
        messageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messageButtonActionPerformed(evt);
            }
        });

        buttonRightPanel.add(messageButton);

        notifyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/TipOfTheDay16.gif")));
        notifyButton.setToolTipText(igs_player_resources.getString("notify_tooltip"));
        notifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notifyButtonActionPerformed(evt);
            }
        });

        buttonRightPanel.add(notifyButton);

        observeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Zoom16.gif")));
        observeButton.setToolTipText(igs_player_resources.getString("observe_button_tooltip"));
        observeButton.setEnabled(playsGame != -1);
        observeButton.addKeyListener(keyHandler);
        observeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                observeButtonActionPerformed(evt);
            }
        });

        buttonRightPanel.add(observeButton);

        trailButton.setIcon(getTrailIcon());
        trailButton.setToolTipText(igs_player_resources.getString("trail_button_tooltip"));
        trailButton.addKeyListener(keyHandler);
        trailButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trailButtonActionPerformed(evt);
            }
        });

        buttonRightPanel.add(trailButton);

        matchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/blk_16.png")));
        matchButton.setToolTipText(igs_player_resources.getString("match_button_tooltip"));
        matchButton.addKeyListener(keyHandler);
        matchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matchButtonActionPerformed(evt);
            }
        });

        buttonRightPanel.add(matchButton);

        automatchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/blk_auto_16.png")));
        automatchButton.setToolTipText(igs_player_resources.getString("automatch_button_tooltip"));
        automatchButton.addKeyListener(keyHandler);
        automatchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                automatchButtonActionPerformed(evt);
            }
        });

        buttonRightPanel.add(automatchButton);

        closeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/exit.gif")));
        closeButton.setToolTipText(igs_player_resources.getString("close_window_tooltip"));
        closeButton.addKeyListener(keyHandler);
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        buttonRightPanel.add(closeButton);

        buttonPanel.add(buttonRightPanel);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        setSize(new java.awt.Dimension(600, 340));
    }//GEN-END:initComponents

    private void messageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messageButtonActionPerformed
        new SendMessageDialog(null, false, playerInfo.getName()).show();
    }//GEN-LAST:event_messageButtonActionPerformed

    private void notifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notifyButtonActionPerformed
        IGSConnection.sendCommand("notify " + playerInfo.getName());
        IGSConnection.sendCommand("notify");
    }//GEN-LAST:event_notifyButtonActionPerformed
    
    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        IGSConnection.sendCommand("stats " + playerInfo.getName());
    }//GEN-LAST:event_refreshButtonActionPerformed
    
    private void bellCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bellCheckBoxActionPerformed
        if (!blockToggle)
            IGSConnection.sendCommand("toggle bell " + bellCheckBox.isSelected());
    }//GEN-LAST:event_bellCheckBoxActionPerformed
    
    private void automailCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_automailCheckBoxActionPerformed
        if (!blockToggle)
            IGSConnection.sendCommand("toggle automail " + automailCheckBox.isSelected());
    }//GEN-LAST:event_automailCheckBoxActionPerformed
    
    private void chatterCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chatterCheckBoxActionPerformed
        if (!blockToggle)
            IGSConnection.sendCommand("toggle chatter " + chatterCheckBox.isSelected());
    }//GEN-LAST:event_chatterCheckBoxActionPerformed
    
    private void kibitzCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kibitzCheckBoxActionPerformed
        if (!blockToggle)
            IGSConnection.sendCommand("toggle kibitz " + kibitzCheckBox.isSelected());
    }//GEN-LAST:event_kibitzCheckBoxActionPerformed
    
    private void shoutsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shoutsCheckBoxActionPerformed
        if (!blockToggle)
            IGSConnection.sendCommand("toggle shout " + shoutsCheckBox.isSelected());
    }//GEN-LAST:event_shoutsCheckBoxActionPerformed
    
    private void quietCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quietCheckBoxActionPerformed
        if (!blockToggle)
            IGSConnection.sendCommand("toggle quiet " + quietCheckBox.isSelected());
    }//GEN-LAST:event_quietCheckBoxActionPerformed
    
    private void lookingCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lookingCheckBoxActionPerformed
        if (!blockToggle)
            IGSConnection.sendCommand("toggle looking " + lookingCheckBox.isSelected());
    }//GEN-LAST:event_lookingCheckBoxActionPerformed
    
    private void openCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openCheckBoxActionPerformed
        if (!blockToggle)
            IGSConnection.sendCommand("toggle open " + openCheckBox.isSelected());
    }//GEN-LAST:event_openCheckBoxActionPerformed
    
    private void defsApplyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defsApplyButtonActionPerformed
        IGSConnection.sendCommand("defs time " + defsTimeTextField.getText());
        IGSConnection.sendCommand("defs size " + defsSizeTextField.getText());
        
        // TODO: Implement a REAL command buffer *sigh*
        Timer timer = new Timer(1000,
        new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                IGSConnection.sendCommand("defs byotime " + defsBYTextField.getText());
                IGSConnection.sendCommand("defs stones " + defsBYSTextField.getText());
            }
        });
        timer.setRepeats(false);
        timer.start();
    }//GEN-LAST:event_defsApplyButtonActionPerformed
    
    private void bozoRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bozoRadioButtonActionPerformed
        IGSConnection.getMainWindow().getBozoHandler().setBozoStatus(playerInfo.getName(), BozoHandler.PLAYER_STATUS_BOZO);
        IGSConnection.getMainWindow().updateBozoListDialog();
    }//GEN-LAST:event_bozoRadioButtonActionPerformed
    
    private void neutralRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_neutralRadioButtonActionPerformed
        IGSConnection.getMainWindow().getBozoHandler().setBozoStatus(playerInfo.getName(), BozoHandler.PLAYER_STATUS_NEUTRAL);
        IGSConnection.getMainWindow().updateBozoListDialog();
    }//GEN-LAST:event_neutralRadioButtonActionPerformed
    
    private void friendRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_friendRadioButtonActionPerformed
        IGSConnection.getMainWindow().getBozoHandler().setBozoStatus(playerInfo.getName(), BozoHandler.PLAYER_STATUS_FRIEND);
        IGSConnection.getMainWindow().updateBozoListDialog();
    }//GEN-LAST:event_friendRadioButtonActionPerformed
    
    private void trailButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trailButtonActionPerformed
        IGSConnection.sendCommand("trail " + playerInfo.getName());
        toggleTrail(!playerInfo.getTrailed());
    }//GEN-LAST:event_trailButtonActionPerformed
    
    private void observeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_observeButtonActionPerformed
        if (playsGame != -1)
            IGSConnection.startObserve(playsGame);
    }//GEN-LAST:event_observeButtonActionPerformed
    
    private void automatchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_automatchButtonActionPerformed
        IGSConnection.sendAutoMatch(playerInfo.getName());
    }//GEN-LAST:event_automatchButtonActionPerformed
    
    private void matchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matchButtonActionPerformed
        IGSConnection.sendMatch(playerInfo.getName());
    }//GEN-LAST:event_matchButtonActionPerformed
    
    private void talkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_talkButtonActionPerformed
        IGSConnection.sendChat(playerInfo.getName());
    }//GEN-LAST:event_talkButtonActionPerformed
    
    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        closeDialog(null);
    }//GEN-LAST:event_closeButtonActionPerformed
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        frameCounter--;
        dialogHash.remove(playerInfo.getName());
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog
    
    private void initSettings() {
        try {
            nameLabel.setText(playerInfo.getName());
            gameLabel.setText(playerInfo.getGameSetting());
            languageLabel.setText(playerInfo.getLanguage());
            ratingLabel.setText(playerInfo.getRating());
            rankLabel.setText(playerInfo.getRank());
            ratedGamesLabel.setText(String.valueOf(playerInfo.getRatedGames()));
            winsLabel.setText(String.valueOf(playerInfo.getWins()));
            lossesLabel.setText(String.valueOf(playerInfo.getLosses()));
            String txt = playerInfo.getInfo();
            // Cut info string down to 60 characters. Else the layout is messed.
            if (txt.length() > 80)
                txt = txt.substring(0, 80);
            infoLabel.setText(txt);
            accessLabel.setText(playerInfo.getAccess());
            emailLabel.setText(playerInfo.getEmail());
            regLabel.setText(playerInfo.getRegDate());
            defsLabel.setText(playerInfo.getDefs());
            if (playerInfo.getStored() > -1)
                storedLabel.setText(String.valueOf(playerInfo.getStored()));
        } catch (NullPointerException e) {}
    }
    
    public void updatePlayerInfo(PlayerInfo pi) {
        playerInfo = pi;
        initSettings();
        initGameSettings();
        if (pi.getUserDefs() != null)
            initUserDefs(pi.getUserDefs());
    }
    
    private void initGameSettings() {
        try {
            resultsTextArea.setText(playerInfo.getResults());
            // --- 1.3 ---
            storedTableModel.initGames(ggo.utils.Utils.splitString(playerInfo.getStoredGames(), "\n"));
            sgfTableModel.initGames(ggo.utils.Utils.splitString(playerInfo.getSGFGames(), "\n"));
        } catch (NullPointerException e) {
            System.err.println("Problem initializing the games: " + e);
            e.printStackTrace();
        }
    }
    
    private void initUserDefs(UserDefs userDefs) {
        blockToggle = true;
        try {
            openCheckBox.setSelected(userDefs.open);
            lookingCheckBox.setSelected(userDefs.looking);
            quietCheckBox.setSelected(userDefs.quiet);
            shoutsCheckBox.setSelected(userDefs.shouts);
            kibitzCheckBox.setSelected(userDefs.kibitz);
            chatterCheckBox.setSelected(userDefs.chatter);
            automailCheckBox.setSelected(userDefs.automail);
            bellCheckBox.setSelected(userDefs.bell);
            
            defsTimeTextField.setText(String.valueOf(userDefs.time));
            defsSizeTextField.setText(String.valueOf(userDefs.size));
            defsBYTextField.setText(String.valueOf(userDefs.byotime));
            defsBYSTextField.setText(String.valueOf(userDefs.byostones));
        } catch (NullPointerException e) {
            System.err.println("No userdefs given: " + e);
        }
        blockToggle = false;
    }
    
    public void toggleTrail(boolean b) {
        playerInfo.setTrailed(b);
        trailButton.setIcon(getTrailIcon());
    }
    
    private ImageIcon getTrailIcon() {
        if (playerInfo.getTrailed())
            return new ImageIcon(getClass().getResource("/images/ZoomIn16.gif"));
        else
            return new ImageIcon(getClass().getResource("/images/ZoomOut16.gif"));
    }
    
    public void toggleBozoStatus(int status) {
        switch (status) {
            case BozoHandler.PLAYER_STATUS_FRIEND:
                friendRadioButton.setSelected(true);
                break;
            case BozoHandler.PLAYER_STATUS_NEUTRAL:
                neutralRadioButton.setSelected(true);
                break;
            case BozoHandler.PLAYER_STATUS_BOZO:
                bozoRadioButton.setSelected(true);
        }
    }
    
    public static PlayerInfoDialog getDialog(String name) {
        if (name != null && dialogHash.containsKey(name))
            return (PlayerInfoDialog)(dialogHash.get(name));
        return null;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField defsSizeTextField;
    private javax.swing.JRadioButton bozoRadioButton;
    private javax.swing.JTextField defsBYSTextField;
    private javax.swing.JTextArea resultsTextArea;
    private javax.swing.JRadioButton friendRadioButton;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JTextField defsTimeTextField;
    private javax.swing.JLabel storedLabel;
    private javax.swing.JPanel defaultsPanel;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JLabel infoLabel;
    private javax.swing.ButtonGroup statusButtonGroup;
    private javax.swing.JPanel buttonRightPanel;
    private javax.swing.JLabel winsLabel;
    private javax.swing.JTable sgfTable;
    private javax.swing.JTextField defsBYTextField;
    private javax.swing.JLabel ratingLabel;
    private javax.swing.JLabel defsLabel;
    private javax.swing.JRadioButton neutralRadioButton;
    private javax.swing.JLabel rankLabel;
    private javax.swing.JCheckBox kibitzCheckBox;
    private javax.swing.JPanel userPanel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTable storedTable;
    private javax.swing.JLabel lossesLabel;
    private javax.swing.JCheckBox automailCheckBox;
    private javax.swing.JCheckBox lookingCheckBox;
    private javax.swing.JLabel accessLabel;
    private javax.swing.JCheckBox bellCheckBox;
    private javax.swing.JButton trailButton;
    private javax.swing.JLabel ratedGamesLabel;
    private javax.swing.JCheckBox openCheckBox;
    private javax.swing.JLabel regLabel;
    private javax.swing.JCheckBox shoutsCheckBox;
    private javax.swing.JLabel gameLabel;
    private javax.swing.JCheckBox chatterCheckBox;
    private javax.swing.JCheckBox quietCheckBox;
    private javax.swing.JLabel languageLabel;
    // End of variables declaration//GEN-END:variables
    
    class KeyHandler extends KeyAdapter {
        public void keyPressed(KeyEvent e) {
            if (e.getKeyCode() == KeyEvent.VK_ESCAPE)
                setVisible(false);
        }
    }
}
