/*
 * IGSHostDialog.java
 */
package ggo.igs.gui;

import javax.swing.*;
import java.awt.event.*;
import java.util.ResourceBundle;
import java.text.MessageFormat;
import ggo.igs.HostConfig;
import ggo.gGo;
import ggo.utils.Settings;

/**
 *  Dialog to set the host configuration.
 *
 * @author  Peter Strempel
 * @version $Revision: 1.2 $, $Date: 2002/08/13 09:05:39 $
 */
public class IGSHostDialog extends javax.swing.JDialog {
    private KeyHandler keyHandler;
    private String currentID;
    private DefaultComboBoxModel model;
    private ResourceBundle igs_resources;

    /** Creates new form IGSHostDialog */
    public IGSHostDialog(java.awt.Frame parent, boolean modal, String currentID) {
        super(parent, modal);
        this.currentID = currentID;
        keyHandler = new KeyHandler();
        igs_resources = gGo.getIGSResources();

        final int sz = gGo.getSettings().getHostConfigList().size();
        String[] initIDList = new String[sz];
        for (int i=0; i<sz; i++)
            initIDList[i] = gGo.getSettings().getHostConfig(i).getID();
        model = new DefaultComboBoxModel(initIDList);

        initComponents();
        initSettings(currentID);
        configComboBox.setSelectedItem(currentID);
        setLocationRelativeTo(parent);
        setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        javax.swing.JPanel hostPanel;
        java.awt.GridBagConstraints gridBagConstraints;
        javax.swing.JLabel portLabel;
        javax.swing.JButton addButton;
        javax.swing.JPanel buttonPanel;
        javax.swing.JButton okButton;
        javax.swing.JLabel hostLabel;
        javax.swing.JLabel nameLabel;
        javax.swing.JPanel configPanel;
        javax.swing.JLabel encodingLabel;
        javax.swing.JLabel passwordLabel;
        javax.swing.JButton cancelButton;
        javax.swing.JPanel mainPanel;

        mainPanel = new javax.swing.JPanel();
        configPanel = new javax.swing.JPanel();
        configComboBox = new javax.swing.JComboBox();
        addButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        hostPanel = new javax.swing.JPanel();
        hostLabel = new javax.swing.JLabel();
        hostTextField = new javax.swing.JTextField();
        portLabel = new javax.swing.JLabel();
        portTextField = new javax.swing.JTextField();
        nameLabel = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        encodingLabel = new javax.swing.JLabel();
        encodingComboBox = new javax.swing.JComboBox();
        buttonPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setTitle(igs_resources.getString("Configure_host"));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        mainPanel.setLayout(new javax.swing.BoxLayout(mainPanel, javax.swing.BoxLayout.Y_AXIS));

        mainPanel.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        configPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 10, 5));

        configComboBox.setModel(model);
        configComboBox.setToolTipText(igs_resources.getString("Select_configuration"));
        configComboBox.setPreferredSize(new java.awt.Dimension(80, 26));
        configComboBox.addKeyListener(keyHandler);
        configComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                configComboBoxItemStateChanged(evt);
            }
        });

        configPanel.add(configComboBox);

        addButton.setText(igs_resources.getString("Add"));
        addButton.setToolTipText(igs_resources.getString("add_tooltip"));
        addButton.addKeyListener(keyHandler);
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        configPanel.add(addButton);

        deleteButton.setText(igs_resources.getString("Delete"));
        deleteButton.setToolTipText(igs_resources.getString("delete_tooltip"));
        deleteButton.addKeyListener(keyHandler);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        configPanel.add(deleteButton);

        mainPanel.add(configPanel);

        hostPanel.setLayout(new java.awt.GridBagLayout());

        hostPanel.setBorder(new javax.swing.border.EtchedBorder());
        hostLabel.setText(igs_resources.getString("Host:"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        hostPanel.add(hostLabel, gridBagConstraints);

        hostTextField.setText(HostConfig.DEFAULT_HOST);
        hostTextField.setToolTipText(igs_resources.getString("host_tooltip"));
        hostTextField.addKeyListener(keyHandler);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        hostPanel.add(hostTextField, gridBagConstraints);

        portLabel.setText(igs_resources.getString("Port:"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        hostPanel.add(portLabel, gridBagConstraints);

        portTextField.setText(String.valueOf(HostConfig.DEFAULT_HOST));
        portTextField.setToolTipText(igs_resources.getString("port_tooltip"));
        portTextField.addKeyListener(keyHandler);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        hostPanel.add(portTextField, gridBagConstraints);

        nameLabel.setText(igs_resources.getString("Name:"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        hostPanel.add(nameLabel, gridBagConstraints);

        nameTextField.setText(HostConfig.DEFAULT_NAME);
        nameTextField.setToolTipText(igs_resources.getString("account_name_tooltip"));
        nameTextField.addKeyListener(keyHandler);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        hostPanel.add(nameTextField, gridBagConstraints);

        passwordLabel.setText(igs_resources.getString("Password:"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        hostPanel.add(passwordLabel, gridBagConstraints);

        passwordField.setToolTipText(igs_resources.getString("account_password_tooltip"));
        passwordField.addKeyListener(keyHandler);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        hostPanel.add(passwordField, gridBagConstraints);

        encodingLabel.setText(igs_resources.getString("Encoding:"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        hostPanel.add(encodingLabel, gridBagConstraints);

        encodingComboBox.setEditable(true);
        encodingComboBox.setModel(getAvailableEncodings());
        encodingComboBox.setToolTipText(igs_resources.getString("encoding_tooltip"));
        encodingComboBox.addKeyListener(keyHandler);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        hostPanel.add(encodingComboBox, gridBagConstraints);

        mainPanel.add(hostPanel);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        okButton.setText(igs_resources.getString("Ok"));
        getRootPane().setDefaultButton(okButton);
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(okButton);

        cancelButton.setText(igs_resources.getString("Cancel"));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(cancelButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }//GEN-END:initComponents

    private void configComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_configComboBoxItemStateChanged
        if (!acceptChanges(currentID)) {
            configComboBox.setSelectedItem(currentID);
            return;
        }
        currentID = (String)(configComboBox.getSelectedItem());
        initSettings(currentID);
    }//GEN-LAST:event_configComboBoxItemStateChanged

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        if (JOptionPane.showConfirmDialog(
        this,
        igs_resources.getString("confirm_delete_account"),
        igs_resources.getString("Question"),
        JOptionPane.YES_NO_OPTION,
        JOptionPane.QUESTION_MESSAGE) == JOptionPane.NO_OPTION)
            return;
        int n = configComboBox.getSelectedIndex();
        configComboBox.removeItemAt(configComboBox.getSelectedIndex());
        gGo.getSettings().getHostConfigList().remove(n);
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        String s = JOptionPane.showInputDialog(this, igs_resources.getString("enter_configuration_name"));
        if (s != null && s.length() > 0) {
            for (int i=0; i<configComboBox.getItemCount(); i++) {
                if (((String)configComboBox.getItemAt(i)).equals(s)) {
                    JOptionPane.showMessageDialog(this,
                    new MessageFormat(igs_resources.getString("add_configuration_failed")).format(new Object[]{s}),
                    igs_resources.getString("Error"),
                    JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
            gGo.getSettings().getHostConfigList().add(
            new HostConfig(s, HostConfig.DEFAULT_HOST, HostConfig.DEFAULT_PORT,
            HostConfig.DEFAULT_NAME, ""));
            configComboBox.addItem(s);
            configComboBox.setSelectedItem(s);
            currentID = s;
            initSettings(s);
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        closeDialog(null);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        acceptChanges(currentID);
        closeDialog(null);
    }//GEN-LAST:event_okButtonActionPerformed

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    private DefaultComboBoxModel getAvailableEncodings() {
        return new DefaultComboBoxModel(
        new String[] {
            igs_resources.getString("system_default_encoding"),
            "Cp1252",
            "ISO-8859-1",
            "UTF-8",
            "SJIS",
            "EUC_JP",
            "EUC_KR",
            "EUC_CN",
            "Big5",
            "GBK",
            "MS932",
            "MS936",
            "MS949",
            "MS874"
        });
    }

    private void initSettings(String id) {
        try {
            HostConfig hostConfig = gGo.getSettings().getHostConfig(id);
            hostTextField.setText(hostConfig.getHost());
            portTextField.setText(String.valueOf(hostConfig.getPort()));
            nameTextField.setText(hostConfig.getName());
            passwordField.setText(hostConfig.getPassword());
            encodingComboBox.setSelectedItem(
                hostConfig.getEncoding() == null ? igs_resources.getString("system_default_encoding") :
                hostConfig.getEncoding());
        } catch (NullPointerException e) {
            System.err.println("Failed to init settings: " + e);
        }
    }

    private boolean acceptChanges(String id) {
        try {
            HostConfig hostConfig = gGo.getSettings().getHostConfig(id);
            hostConfig.setHost(hostTextField.getText());
            hostConfig.setPort(Integer.parseInt(portTextField.getText()));
            hostConfig.setName(nameTextField.getText());
            hostConfig.setPassword(new String(passwordField.getPassword()));
            if (encodingComboBox.getSelectedItem() != null &&
                !hostConfig.setEncoding(encodingComboBox.getSelectedItem().toString())) {
                JOptionPane.showMessageDialog(this,
                new MessageFormat(igs_resources.getString("encoding_not_supported_error")).format(new Object[]{encodingComboBox.getSelectedItem().toString()}),
                igs_resources.getString("Warning"),
                JOptionPane.WARNING_MESSAGE);
                return false;
            }
            gGo.getSettings().setCurrentHostConfig(id);
            gGo.getSettings().saveSettings();
        } catch (NullPointerException e) {
            System.err.println("Failed to accept settings: " + e);
        } catch (NumberFormatException e) {
            System.err.println("Failed to parse port: " + e);
        }
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox configComboBox;
    private javax.swing.JButton deleteButton;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JComboBox encodingComboBox;
    private javax.swing.JTextField portTextField;
    private javax.swing.JTextField hostTextField;
    private javax.swing.JTextField nameTextField;
    // End of variables declaration//GEN-END:variables

    class KeyHandler extends KeyAdapter {
        public void keyPressed(KeyEvent e) {
            if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {
                setVisible(false);
                dispose();
            }
        }
    }
}
