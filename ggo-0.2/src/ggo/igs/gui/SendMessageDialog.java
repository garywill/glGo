/*
 * SendMessageDialog.java
 *
 *  gGo
 *  Copyright (C) 2002  Peter Strempel <pstrempel@t-online.de>
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
package ggo.igs.gui;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.ResourceBundle;
import java.text.MessageFormat;
import ggo.gGo;
import ggo.utils.Utils;
import ggo.igs.IGSConnection;

/**
 * Simple dialog to compose a message to a player.
 *
 * @author  Peter Strempel
 * @version $Revision: 1.2 $, $Date: 2002/10/25 04:16:13 $
 */
public class SendMessageDialog extends javax.swing.JDialog {
    private String playerName;
    private ResourceBundle igs_message_resources;

    /** Creates new form SendMessageDialog */
    public SendMessageDialog(java.awt.Frame parent, boolean modal, String playerName) {
        super(parent, modal);

        this.playerName = playerName;
        if (playerName == null || playerName.length() == 0) {
            // Whoops
            System.err.println("No playername given, aborting...");
            setVisible(false);
            dispose();
            return;
        }

        igs_message_resources = gGo.getIGSMessageResources();

        setTitle(MessageFormat.format(igs_message_resources.getString("send_dialog_title"), new Object[]{ playerName }));
        initComponents();

        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        setLocation((screenSize.width - getWidth()) / 2, (screenSize.height - getHeight()) / 2);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        javax.swing.JButton sendButton;
        javax.swing.JPanel mainPanel;
        javax.swing.JButton cancelButton;
        javax.swing.JPanel buttonPanel;

        mainPanel = new javax.swing.JPanel();
        scrollPane = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        buttonPanel = new javax.swing.JPanel();
        sendButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        mainPanel.setLayout(new java.awt.BorderLayout());

        scrollPane.setPreferredSize(new java.awt.Dimension(400, 200));
        scrollPane.setViewportView(textArea);

        mainPanel.add(scrollPane, java.awt.BorderLayout.CENTER);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        sendButton.setText(igs_message_resources.getString("send"));
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(sendButton);

        cancelButton.setText(igs_message_resources.getString("cancel"));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(cancelButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        closeDialog(null);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        String text = textArea.getText();
        if (text == null || text.length() == 0)
            return;

        Timer timer;
        final String name = playerName;
        String[] lines = Utils.splitString(text, "\n");
        for (int i=0, sz=lines.length; i<sz; i++) {
            if (lines[i] != null && lines[i].length() > 0) {
                final String txt = lines[i];
                timer = new Timer(1000 * i + 100,
                new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        IGSConnection.sendCommand("message " + name + " " + txt);
                        // System.err.println("message " + name + " " + txt);
                    }
                });
                timer.setRepeats(false);
                timer.start();
            }
        }

        closeDialog(null);
    }//GEN-LAST:event_sendButtonActionPerformed

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}

