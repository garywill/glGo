/*
 * PreferencesDialog.java
 *
 *  gGo
 *  Copyright (C) 2002  Peter Strempel <pstrempel@t-online.de>
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
package ggo.dialogs;

import javax.swing.*;
import javax.swing.border.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ResourceBundle;
import ggo.*;
import ggo.utils.*;

/**
 *  Dialog to set the application preferences
 *
 *@author     Peter Strempel
 *@version    $Revision: 1.14 $, $Date: 2002/10/05 11:18:31 $
 */
public class PreferencesDialog extends JDialog implements Defines {
    private String selectedTheme;
    private KeyHandler keyHandler;
    private Settings settings;
    private boolean result = false, soundSystemTmp, fixWindowsFontTmp;
    private int localeTmp;
    private ResourceBundle board_resources;

    public PreferencesDialog(java.awt.Frame parent, boolean modal, Settings s) {
        super(parent, modal);

        try {
            if (s.getThemePack() != null && s.getThemePack().length() > 0)
                selectedTheme = s.getThemePack();
            else
                selectedTheme = "skinlf-themepack.xml";
        } catch (NullPointerException e) {
            selectedTheme = "skinlf-themepack.xml";
        }

        keyHandler = new KeyHandler();
        board_resources = gGo.getBoardResources();
        initComponents();
        setLocationRelativeTo(parent);

        settings = s;
        if (s == null)
            System.err.println("PreferencesDialog() - Settings == null");
        else
            initSettings();

        antiSlipDelayLabel.setEnabled(antiSlipCheckBox.isSelected());
        antiSlipDelayTextField.setEnabled(antiSlipCheckBox.isSelected());

        localeTmp = localeComboBox.getSelectedIndex();
        fixWindowsFontTmp = fixWindowsFontsCheckBox.isSelected();
        soundSystemTmp = soundSystemCheckBox.isSelected();

        setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        javax.swing.JLabel gnugoPathLabel;
        javax.swing.ButtonGroup sidebarButtonGroup;
        javax.swing.JPanel boardSidebarPanel;
        javax.swing.JLabel localeLabel;
        javax.swing.JPanel remDirPanel;
        javax.swing.JLabel styleLabel;
        javax.swing.JPanel selectThemePanel;
        javax.swing.JButton okButton;
        javax.swing.JPanel serverPortPanel;
        javax.swing.JPanel gnugoPanel;
        javax.swing.JPanel antislipPanel;
        javax.swing.JPanel localServerPanel;
        javax.swing.JTabbedPane tabbedPane;
        javax.swing.JLabel monospacedfFontSizeLabel;
        javax.swing.JButton cancelButton;
        javax.swing.JPanel buttomPanel;
        javax.swing.JPanel sidebarLayoutPanel;
        javax.swing.JPanel igsPanel;
        javax.swing.JLabel SansSerifFontSizeLabel;
        javax.swing.JLabel gnugoArgsLabel;
        javax.swing.JPanel advancedPanel;
        javax.swing.JLabel timeSoundLabel;
        java.awt.GridBagConstraints gridBagConstraints;
        javax.swing.JLabel serverLabel;
        javax.swing.JLabel serifFontSizeLabel;
        javax.swing.JLabel clickTypeLabel;
        javax.swing.JPanel interfacePanel;
        javax.swing.JPanel soundSystemPanel;
        javax.swing.JLabel timeLabel;
        javax.swing.JPanel stylePanel;
        javax.swing.JPanel gnugoArgsPanel;
        javax.swing.JPanel boardPanel;
        javax.swing.JPanel styleThemePanel;
        javax.swing.JPanel fontSizePanel;
        javax.swing.JLabel igsChatLabel;
        javax.swing.JPanel languagePanel;
        javax.swing.JPanel themePanel;
        javax.swing.JPanel sidebarPanel;
        javax.swing.JPanel gnugoPathPanel;

        sidebarButtonGroup = new javax.swing.ButtonGroup();
        tabbedPane = new javax.swing.JTabbedPane();
        interfacePanel = new javax.swing.JPanel();
        styleThemePanel = new javax.swing.JPanel();
        stylePanel = new javax.swing.JPanel();
        styleLabel = new javax.swing.JLabel();
        styleComboBox = new javax.swing.JComboBox();
        themePanel = new javax.swing.JPanel();
        themeLabel = new javax.swing.JLabel();
        selectThemePanel = new javax.swing.JPanel();
        selectThemeButton = new javax.swing.JButton();
        resetThemeButton = new javax.swing.JButton();
        fontSizePanel = new javax.swing.JPanel();
        serifFontSizeLabel = new javax.swing.JLabel();
        serifFontSizeTextField = new javax.swing.JTextField();
        SansSerifFontSizeLabel = new javax.swing.JLabel();
        sansSerifFontSizeTextField = new javax.swing.JTextField();
        monospacedfFontSizeLabel = new javax.swing.JLabel();
        monospacedFontSizeTextField = new javax.swing.JTextField();
        boardSidebarPanel = new javax.swing.JPanel();
        sidebarPanel = new javax.swing.JPanel();
        showSidebarCheckBox = new javax.swing.JCheckBox();
        sidebarLayoutPanel = new javax.swing.JPanel();
        sidebarLeftRadioButton = new javax.swing.JRadioButton();
        sidebarRightRadioButton = new javax.swing.JRadioButton();
        boardPanel = new javax.swing.JPanel();
        showToolbarCheckBox = new javax.swing.JCheckBox();
        showStatusbarCheckBox = new javax.swing.JCheckBox();
        showSliderCheckBox = new javax.swing.JCheckBox();
        showCoordsCheckBox = new javax.swing.JCheckBox();
        showCursorCheckBox = new javax.swing.JCheckBox();
        showVarGhostsCheckBox = new javax.swing.JCheckBox();
        showHorizontalCommentCheckBox = new javax.swing.JCheckBox();
        playClickSoundCheckBox = new javax.swing.JCheckBox();
        igsPanel = new javax.swing.JPanel();
        antislipPanel = new javax.swing.JPanel();
        antiSlipCheckBox = new javax.swing.JCheckBox();
        antiSlipDelayTextField = new javax.swing.JTextField();
        antiSlipDelayLabel = new javax.swing.JLabel();
        saveIGSLocationCheckBox = new javax.swing.JCheckBox();
        saveIGSSizeCheckBox = new javax.swing.JCheckBox();
        clickTypeLabel = new javax.swing.JLabel();
        clickTypeComboBox = new javax.swing.JComboBox();
        igsChatLabel = new javax.swing.JLabel();
        igsChatterTypeComboBox = new javax.swing.JComboBox();
        timeLabel = new javax.swing.JLabel();
        timeTextField = new javax.swing.JTextField();
        timeSoundLabel = new javax.swing.JLabel();
        timeSoundComboBox = new javax.swing.JComboBox();
        igsDisplayInfoCheckBox = new javax.swing.JCheckBox();
        igsDisplayMovesCheckBox = new javax.swing.JCheckBox();
        languagePanel = new javax.swing.JPanel();
        localeLabel = new javax.swing.JLabel();
        localeComboBox = new javax.swing.JComboBox();
        fixWindowsFontsCheckBox = new javax.swing.JCheckBox();
        advancedPanel = new javax.swing.JPanel();
        remDirPanel = new javax.swing.JPanel();
        remDirCheckBox = new javax.swing.JCheckBox();
        gnugoPanel = new javax.swing.JPanel();
        gnugoPathPanel = new javax.swing.JPanel();
        gnugoPathLabel = new javax.swing.JLabel();
        gnugoPathTextField = new javax.swing.JTextField();
        gnugoArgsPanel = new javax.swing.JPanel();
        gnugoArgsLabel = new javax.swing.JLabel();
        gnugoArgsTextField = new javax.swing.JTextField();
        localServerPanel = new javax.swing.JPanel();
        disableServerCheckBox = new javax.swing.JCheckBox();
        serverPortPanel = new javax.swing.JPanel();
        serverLabel = new javax.swing.JLabel();
        serverPortTextField = new javax.swing.JTextField();
        soundSystemPanel = new javax.swing.JPanel();
        soundSystemCheckBox = new javax.swing.JCheckBox();
        buttomPanel = new javax.swing.JPanel();
        resetDefaultsButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setTitle(board_resources.getString("preferences_dialog_title"));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        tabbedPane.addKeyListener(keyHandler);
        interfacePanel.setLayout(new java.awt.BorderLayout());

        styleThemePanel.setLayout(new javax.swing.BoxLayout(styleThemePanel, javax.swing.BoxLayout.Y_AXIS));

        stylePanel.setBorder(new javax.swing.border.TitledBorder(board_resources.getString("Style")));
        styleLabel.setText(board_resources.getString("Look_and_feel:"));
        stylePanel.add(styleLabel);

        styleComboBox.setModel(getAvailableLookAndFeels());
        styleComboBox.setToolTipText(board_resources.getString("lookandfeel_tooltip"));
        styleComboBox.addKeyListener(keyHandler);
        styleComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                styleComboBoxItemStateChanged(evt);
            }
        });

        stylePanel.add(styleComboBox);

        styleThemePanel.add(stylePanel);

        themePanel.setLayout(new javax.swing.BoxLayout(themePanel, javax.swing.BoxLayout.Y_AXIS));

        themePanel.setBorder(new javax.swing.border.TitledBorder(board_resources.getString("Theme")));
        themeLabel.setText(selectedTheme.substring(selectedTheme.length() > 20 ? selectedTheme.length() - 20 : 0, selectedTheme.length()));
        themeLabel.setAlignmentX(0.5F);
        themeLabel.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5)));
        themeLabel.setMaximumSize(new java.awt.Dimension(140, 30));
        themeLabel.setPreferredSize(new java.awt.Dimension(100, 26));
        themePanel.add(themeLabel);

        selectThemeButton.setText(board_resources.getString("Select_themepack"));
        selectThemeButton.setToolTipText(board_resources.getString("select_themepack_tooltip"));
        selectThemeButton.setEnabled(false);
        selectThemeButton.addKeyListener(keyHandler);
        selectThemeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectThemeButtonActionPerformed(evt);
            }
        });

        selectThemePanel.add(selectThemeButton);

        resetThemeButton.setText(board_resources.getString("Reset"));
        resetThemeButton.setToolTipText(board_resources.getString("reset_theme_tooltip"));
        resetThemeButton.setEnabled(false);
        resetThemeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetThemeButtonActionPerformed(evt);
            }
        });

        selectThemePanel.add(resetThemeButton);

        themePanel.add(selectThemePanel);

        styleThemePanel.add(themePanel);

        fontSizePanel.setLayout(new java.awt.GridBagLayout());

        fontSizePanel.setBorder(new javax.swing.border.TitledBorder(board_resources.getString("Font")));
        serifFontSizeLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        serifFontSizeLabel.setText(board_resources.getString("Output_font_size:"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        fontSizePanel.add(serifFontSizeLabel, gridBagConstraints);

        serifFontSizeTextField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        serifFontSizeTextField.setText("12");
        serifFontSizeTextField.setToolTipText(board_resources.getString("output_font_size_tooltip"));
        serifFontSizeTextField.setPreferredSize(new java.awt.Dimension(30, 24));
        serifFontSizeTextField.addKeyListener(keyHandler);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        fontSizePanel.add(serifFontSizeTextField, gridBagConstraints);

        SansSerifFontSizeLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        SansSerifFontSizeLabel.setText(board_resources.getString("Input_font_size:"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        fontSizePanel.add(SansSerifFontSizeLabel, gridBagConstraints);

        sansSerifFontSizeTextField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        sansSerifFontSizeTextField.setText("12");
        sansSerifFontSizeTextField.setToolTipText(board_resources.getString("input_font_size_tooltip"));
        sansSerifFontSizeTextField.setPreferredSize(new java.awt.Dimension(30, 24));
        sansSerifFontSizeTextField.addKeyListener(keyHandler);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        fontSizePanel.add(sansSerifFontSizeTextField, gridBagConstraints);

        monospacedfFontSizeLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        monospacedfFontSizeLabel.setText(board_resources.getString("Terminal_font_size:"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        fontSizePanel.add(monospacedfFontSizeLabel, gridBagConstraints);

        monospacedFontSizeTextField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        monospacedFontSizeTextField.setText("12");
        monospacedFontSizeTextField.setToolTipText(board_resources.getString("terminal_font_size_tooltip"));
        monospacedFontSizeTextField.setPreferredSize(new java.awt.Dimension(30, 24));
        monospacedFontSizeTextField.addKeyListener(keyHandler);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        fontSizePanel.add(monospacedFontSizeTextField, gridBagConstraints);

        styleThemePanel.add(fontSizePanel);

        interfacePanel.add(styleThemePanel, java.awt.BorderLayout.WEST);

        boardSidebarPanel.setLayout(new java.awt.BorderLayout());

        sidebarPanel.setLayout(new javax.swing.BoxLayout(sidebarPanel, javax.swing.BoxLayout.Y_AXIS));

        sidebarPanel.setBorder(new javax.swing.border.TitledBorder(board_resources.getString("Sidebar")));
        showSidebarCheckBox.setText(board_resources.getString("Show_sidebar"));
        showSidebarCheckBox.setToolTipText(board_resources.getString("Show_sidebar_tooltip"));
        showSidebarCheckBox.addKeyListener(keyHandler);
        showSidebarCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                showSidebarCheckBoxItemStateChanged(evt);
            }
        });

        sidebarPanel.add(showSidebarCheckBox);

        sidebarLayoutPanel.setLayout(new javax.swing.BoxLayout(sidebarLayoutPanel, javax.swing.BoxLayout.X_AXIS));

        sidebarLayoutPanel.setAlignmentX(0.0F);
        sidebarLeftRadioButton.setText(board_resources.getString("Left"));
        sidebarLeftRadioButton.setToolTipText(board_resources.getString("sidebar_left_tooltip"));
        sidebarButtonGroup.add(sidebarLeftRadioButton);
        sidebarLayoutPanel.add(sidebarLeftRadioButton);

        sidebarRightRadioButton.setText(board_resources.getString("Right"));
        sidebarRightRadioButton.setToolTipText(board_resources.getString("sidebar_right_tooltip"));
        sidebarButtonGroup.add(sidebarRightRadioButton);
        sidebarLayoutPanel.add(sidebarRightRadioButton);

        sidebarPanel.add(sidebarLayoutPanel);

        boardSidebarPanel.add(sidebarPanel, java.awt.BorderLayout.NORTH);

        boardPanel.setLayout(new javax.swing.BoxLayout(boardPanel, javax.swing.BoxLayout.Y_AXIS));

        boardPanel.setBorder(new javax.swing.border.TitledBorder(board_resources.getString("Board")));
        showToolbarCheckBox.setText(board_resources.getString("Show_toolbar"));
        showToolbarCheckBox.setToolTipText(board_resources.getString("Show_toolbar_tooltip"));
        showToolbarCheckBox.addKeyListener(keyHandler);
        boardPanel.add(showToolbarCheckBox);

        showStatusbarCheckBox.setText(board_resources.getString("Show_statusbar"));
        showStatusbarCheckBox.setToolTipText(board_resources.getString("Show_statusbar_tooltip"));
        showStatusbarCheckBox.addKeyListener(keyHandler);
        boardPanel.add(showStatusbarCheckBox);

        showSliderCheckBox.setText(board_resources.getString("Show_slider"));
        showSliderCheckBox.setToolTipText(board_resources.getString("Show_slider_tooltip"));
        showSliderCheckBox.addKeyListener(keyHandler);
        boardPanel.add(showSliderCheckBox);

        showCoordsCheckBox.setText(board_resources.getString("Show_coordinates"));
        showCoordsCheckBox.setToolTipText(board_resources.getString("Show_coordinates_tooltip"));
        showCoordsCheckBox.addKeyListener(keyHandler);
        boardPanel.add(showCoordsCheckBox);

        showCursorCheckBox.setText(board_resources.getString("Show_cursor"));
        showCursorCheckBox.setToolTipText(board_resources.getString("Show_cursor_tooltip"));
        showCursorCheckBox.addKeyListener(keyHandler);
        boardPanel.add(showCursorCheckBox);

        showVarGhostsCheckBox.setText(board_resources.getString("Show_variations"));
        showVarGhostsCheckBox.setToolTipText(board_resources.getString("Show_variations_tooltip"));
        showVarGhostsCheckBox.addKeyListener(keyHandler);
        boardPanel.add(showVarGhostsCheckBox);

        showHorizontalCommentCheckBox.setText(board_resources.getString("Show_horizontal_comment"));
        showHorizontalCommentCheckBox.setToolTipText(board_resources.getString("Show_horizontal_comment_tooltip"));
        showHorizontalCommentCheckBox.addKeyListener(keyHandler);
        boardPanel.add(showHorizontalCommentCheckBox);

        playClickSoundCheckBox.setText(board_resources.getString("Play_sound"));
        playClickSoundCheckBox.setToolTipText(board_resources.getString("play_sound_tooltip"));
        playClickSoundCheckBox.addKeyListener(keyHandler);
        boardPanel.add(playClickSoundCheckBox);

        boardSidebarPanel.add(boardPanel, java.awt.BorderLayout.CENTER);

        interfacePanel.add(boardSidebarPanel, java.awt.BorderLayout.CENTER);

        tabbedPane.addTab(board_resources.getString("Interface"), interfacePanel);

        igsPanel.setLayout(new java.awt.GridBagLayout());

        antislipPanel.setLayout(new java.awt.GridBagLayout());

        antislipPanel.setBorder(new javax.swing.border.TitledBorder(board_resources.getString("Antislip")));
        antiSlipCheckBox.setText(board_resources.getString("Antislip_system"));
        antiSlipCheckBox.setToolTipText(board_resources.getString("antitslip_tooltip"));
        antiSlipCheckBox.setAlignmentX(0.5F);
        antiSlipCheckBox.addKeyListener(keyHandler);
        antiSlipCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                antiSlipCheckBoxItemStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        antislipPanel.add(antiSlipCheckBox, gridBagConstraints);

        antiSlipDelayTextField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        antiSlipDelayTextField.setText("500");
        antiSlipDelayTextField.setToolTipText(board_resources.getString("antislip_delay_tooltip"));
        antiSlipDelayTextField.addKeyListener(keyHandler);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        antislipPanel.add(antiSlipDelayTextField, gridBagConstraints);

        antiSlipDelayLabel.setText(board_resources.getString("delay_in_msec"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        antislipPanel.add(antiSlipDelayLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        igsPanel.add(antislipPanel, gridBagConstraints);

        saveIGSLocationCheckBox.setText(board_resources.getString("Save_window_positions"));
        saveIGSLocationCheckBox.setToolTipText(board_resources.getString("save_window_positions_tooltip"));
        saveIGSLocationCheckBox.addKeyListener(keyHandler);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        igsPanel.add(saveIGSLocationCheckBox, gridBagConstraints);

        saveIGSSizeCheckBox.setText(board_resources.getString("Save_window_size"));
        saveIGSSizeCheckBox.setToolTipText(board_resources.getString("save_window_size_tooltip"));
        saveIGSSizeCheckBox.addKeyListener(keyHandler);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        igsPanel.add(saveIGSSizeCheckBox, gridBagConstraints);

        clickTypeLabel.setText(board_resources.getString("Playing_a_stone:"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        igsPanel.add(clickTypeLabel, gridBagConstraints);

        clickTypeComboBox.setModel(getIGSClickTypes());
        clickTypeComboBox.setToolTipText(board_resources.getString("playing_stone_tooltip"));
        clickTypeComboBox.addKeyListener(keyHandler);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        igsPanel.add(clickTypeComboBox, gridBagConstraints);

        igsChatLabel.setText(board_resources.getString("IGS_chat:"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        igsPanel.add(igsChatLabel, gridBagConstraints);

        igsChatterTypeComboBox.setModel(getIGSChatterTypes());
        igsChatterTypeComboBox.setToolTipText(board_resources.getString("igs_chat_tooltip"));
        igsChatterTypeComboBox.addKeyListener(keyHandler);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        igsPanel.add(igsChatterTypeComboBox, gridBagConstraints);

        timeLabel.setText(board_resources.getString("Time_warning:"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        igsPanel.add(timeLabel, gridBagConstraints);

        timeTextField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        timeTextField.setText("30");
        timeTextField.setToolTipText(board_resources.getString("time_warning_tooltip"));
        timeTextField.addKeyListener(keyHandler);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        igsPanel.add(timeTextField, gridBagConstraints);

        timeSoundLabel.setText(board_resources.getString("Warning_sound:"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        igsPanel.add(timeSoundLabel, gridBagConstraints);

        timeSoundComboBox.setModel(getSoundWarningTypes());
        timeSoundComboBox.setToolTipText(board_resources.getString("warning_sound_tooltip"));
        timeSoundComboBox.addKeyListener(keyHandler);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        igsPanel.add(timeSoundComboBox, gridBagConstraints);

        igsDisplayInfoCheckBox.setText(board_resources.getString("igs_display_info"));
        igsDisplayInfoCheckBox.setToolTipText(board_resources.getString("igs_display_info_tooltip"));
        igsDisplayInfoCheckBox.addKeyListener(keyHandler);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        igsPanel.add(igsDisplayInfoCheckBox, gridBagConstraints);

        igsDisplayMovesCheckBox.setText(board_resources.getString("igs_display_moves"));
        igsDisplayMovesCheckBox.setToolTipText(board_resources.getString("igs_display_moves_tooltip"));
        igsDisplayMovesCheckBox.addKeyListener(keyHandler);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        igsPanel.add(igsDisplayMovesCheckBox, gridBagConstraints);

        tabbedPane.addTab(board_resources.getString("IGS"), igsPanel);

        languagePanel.setLayout(new java.awt.GridBagLayout());

        localeLabel.setText(board_resources.getString("Language"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        languagePanel.add(localeLabel, gridBagConstraints);

        localeComboBox.setModel(getAvailableLocales());
        localeComboBox.setToolTipText(board_resources.getString("language_tooltip"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        languagePanel.add(localeComboBox, gridBagConstraints);

        fixWindowsFontsCheckBox.setText(board_resources.getString("Fix_windows_fonts"));
        fixWindowsFontsCheckBox.setToolTipText(board_resources.getString("fix_windows_fonts_tooltip"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        languagePanel.add(fixWindowsFontsCheckBox, gridBagConstraints);

        tabbedPane.addTab(board_resources.getString("Language"), languagePanel);

        advancedPanel.setLayout(new javax.swing.BoxLayout(advancedPanel, javax.swing.BoxLayout.Y_AXIS));

        remDirCheckBox.setSelected(true);
        remDirCheckBox.setText(board_resources.getString("Remember_last_directory"));
        remDirCheckBox.setToolTipText(board_resources.getString("remember_last_directory_tooltip"));
        remDirCheckBox.addKeyListener(keyHandler);
        remDirPanel.add(remDirCheckBox);

        advancedPanel.add(remDirPanel);

        gnugoPanel.setLayout(new javax.swing.BoxLayout(gnugoPanel, javax.swing.BoxLayout.Y_AXIS));

        gnugoPanel.setBorder(new javax.swing.border.TitledBorder(board_resources.getString("GnuGo")));
        gnugoPathPanel.setLayout(new java.awt.GridBagLayout());

        gnugoPathLabel.setText(board_resources.getString("Path_to_GnuGo:"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        gnugoPathPanel.add(gnugoPathLabel, gridBagConstraints);

        gnugoPathTextField.setText("gnugo");
        gnugoPathTextField.setPreferredSize(new java.awt.Dimension(240, 26));
        gnugoPathTextField.addKeyListener(keyHandler);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        gnugoPathPanel.add(gnugoPathTextField, gridBagConstraints);

        gnugoPanel.add(gnugoPathPanel);

        gnugoArgsPanel.setLayout(new java.awt.GridBagLayout());

        gnugoArgsLabel.setText(board_resources.getString("GnuGo_arguments:"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        gnugoArgsPanel.add(gnugoArgsLabel, gridBagConstraints);

        gnugoArgsTextField.setText("--mode gtp --quiet");
        gnugoArgsTextField.setPreferredSize(new java.awt.Dimension(240, 26));
        gnugoArgsTextField.addKeyListener(keyHandler);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        gnugoArgsPanel.add(gnugoArgsTextField, gridBagConstraints);

        gnugoPanel.add(gnugoArgsPanel);

        advancedPanel.add(gnugoPanel);

        localServerPanel.setLayout(new javax.swing.BoxLayout(localServerPanel, javax.swing.BoxLayout.Y_AXIS));

        localServerPanel.setBorder(new javax.swing.border.TitledBorder("Server"));
        disableServerCheckBox.setText(board_resources.getString("Disable_local_server"));
        disableServerCheckBox.setToolTipText(board_resources.getString("disable_local_server_tooltip"));
        disableServerCheckBox.addKeyListener(keyHandler);
        localServerPanel.add(disableServerCheckBox);

        serverLabel.setText(board_resources.getString("Server_port:"));
        serverPortPanel.add(serverLabel);

        serverPortTextField.setText("9999");
        serverPortTextField.setToolTipText(board_resources.getString("server_port_toolip"));
        serverPortTextField.addKeyListener(keyHandler);
        serverPortPanel.add(serverPortTextField);

        localServerPanel.add(serverPortPanel);

        advancedPanel.add(localServerPanel);

        soundSystemCheckBox.setText(board_resources.getString("Simple_sound_system"));
        soundSystemCheckBox.setToolTipText(board_resources.getString("simple_sound_system_tooltip"));
        soundSystemCheckBox.addKeyListener(keyHandler);
        soundSystemPanel.add(soundSystemCheckBox);

        advancedPanel.add(soundSystemPanel);

        tabbedPane.addTab(board_resources.getString("Advanced"), advancedPanel);

        getContentPane().add(tabbedPane, java.awt.BorderLayout.CENTER);

        buttomPanel.setLayout(new javax.swing.BoxLayout(buttomPanel, javax.swing.BoxLayout.X_AXIS));

        buttomPanel.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5)));
        resetDefaultsButton.setText(board_resources.getString("Reset_long"));
        resetDefaultsButton.setToolTipText(board_resources.getString("reset_tooltip_long"));
        resetDefaultsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetDefaultsButtonActionPerformed(evt);
            }
        });

        buttomPanel.add(resetDefaultsButton);

        buttomPanel.add(Box.createHorizontalGlue());
        okButton.setText(board_resources.getString("Ok"));
        okButton.setToolTipText(board_resources.getString("ok_apply_tooltip"));
        getRootPane().setDefaultButton(okButton);
        okButton.addKeyListener(keyHandler);
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        buttomPanel.add(okButton);

        cancelButton.addKeyListener(keyHandler);
        cancelButton.setText(board_resources.getString("Cancel"));
        cancelButton.setToolTipText(board_resources.getString("Cancel_tooltip"));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        buttomPanel.add(cancelButton);

        getContentPane().add(buttomPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }//GEN-END:initComponents

    private void showSidebarCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_showSidebarCheckBoxItemStateChanged
        sidebarRightRadioButton.setEnabled(evt.getStateChange() == ItemEvent.SELECTED);
        sidebarLeftRadioButton.setEnabled(evt.getStateChange() == ItemEvent.SELECTED);
    }//GEN-LAST:event_showSidebarCheckBoxItemStateChanged

    private void antiSlipCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_antiSlipCheckBoxItemStateChanged
        antiSlipDelayLabel.setEnabled(evt.getStateChange() == ItemEvent.SELECTED);
        antiSlipDelayTextField.setEnabled(evt.getStateChange() == ItemEvent.SELECTED);
    }//GEN-LAST:event_antiSlipCheckBoxItemStateChanged

    private void resetThemeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetThemeButtonActionPerformed
        selectedTheme = "skinlf-themepack.xml";
        themeLabel.setText(selectedTheme);
    }//GEN-LAST:event_resetThemeButtonActionPerformed

    private void resetDefaultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetDefaultsButtonActionPerformed
        settings.initDefaults(false);
        selectedTheme = "skinlf-themepack.xml";
        themeLabel.setText(selectedTheme);
        initSettings();
    }//GEN-LAST:event_resetDefaultsButtonActionPerformed

    private void styleComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_styleComboBoxItemStateChanged
        boolean enable = styleComboBox.getSelectedIndex() == LOOKANDFEEL_SKIN;
        selectThemeButton.setEnabled(enable);
        resetThemeButton.setEnabled(enable);
    }//GEN-LAST:event_styleComboBoxItemStateChanged

    private void selectThemeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectThemeButtonActionPerformed
        final JFileChooser fc = new JFileChooser();
        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
            selectedTheme = fc.getSelectedFile().getAbsolutePath();
        themeLabel.setText(selectedTheme);
    }//GEN-LAST:event_selectThemeButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        result = false;
        setVisible(false);
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        acceptChanges();

        if (localeTmp != localeComboBox.getSelectedIndex()) {
            JOptionPane.showMessageDialog(
            this,
            board_resources.getString("language_changed_warning"),
            PACKAGE,
            JOptionPane.INFORMATION_MESSAGE);
        }
        else if (fixWindowsFontTmp != fixWindowsFontsCheckBox.isSelected()) {
            JOptionPane.showMessageDialog(
            this,
            board_resources.getString("windows_font_fix_changed"),
            PACKAGE,
            JOptionPane.INFORMATION_MESSAGE);
        }
        else if (soundSystemTmp != soundSystemCheckBox.isSelected()) {
            JOptionPane.showMessageDialog(
            this,
            board_resources.getString("sound_changed_warning"),
            PACKAGE,
            JOptionPane.INFORMATION_MESSAGE);
        }

        setVisible(false);
        dispose();
    }//GEN-LAST:event_okButtonActionPerformed

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        result = false;
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    /**  Init the dialog elements with existing settings */
    private void initSettings() {
        styleComboBox.setSelectedIndex(settings.getLookAndFeel());
        showToolbarCheckBox.setSelected(settings.getShowToolbar());
        showStatusbarCheckBox.setSelected(settings.getShowStatusbar());
        showSliderCheckBox.setSelected(settings.getShowSlider());
        showSidebarCheckBox.setSelected(settings.getShowSidebar());
        sidebarRightRadioButton.setSelected(settings.getSidebarLayout() == SIDEBAR_EAST);
        sidebarRightRadioButton.setEnabled(settings.getShowSidebar());
        sidebarLeftRadioButton.setSelected(settings.getSidebarLayout() == SIDEBAR_WEST);
        sidebarLeftRadioButton.setEnabled(settings.getShowSidebar());
        showCoordsCheckBox.setSelected(settings.getShowCoords());
        showCursorCheckBox.setSelected(settings.getShowCursor());
        showVarGhostsCheckBox.setSelected(settings.getShowVariationGhosts());
        showHorizontalCommentCheckBox.setSelected(settings.getShowHorizontalComment());
        playClickSoundCheckBox.setSelected(settings.getPlayClickSound());
        remDirCheckBox.setSelected(settings.getDoRemDir());
        gnugoPathTextField.setText(settings.getGnugoPath() != null ? settings.getGnugoPath() : "gnugo");
        gnugoArgsTextField.setText(settings.getGnugoArgs() != null ? settings.getGnugoArgs() : "--mode gtp --quiet");
        disableServerCheckBox.setSelected(settings.getServerDisabled());
        serverPortTextField.setText(settings.getServerPort() == -1 ? "9999" : String.valueOf(settings.getServerPort()));
        antiSlipCheckBox.setSelected(settings.getAntiSlip());
        antiSlipDelayTextField.setText(String.valueOf(settings.getAntiSlipDelay()));
        serifFontSizeTextField.setText(String.valueOf(settings.getSerifFontSize()));
        sansSerifFontSizeTextField.setText(String.valueOf(settings.getSansSerifFontSize()));
        monospacedFontSizeTextField.setText(String.valueOf(settings.getMonospacedFontSize()));
        igsChatterTypeComboBox.setSelectedIndex(settings.getIGSChatterType());
        clickTypeComboBox.setSelectedIndex(settings.getClickType());
        timeTextField.setText(String.valueOf(settings.getTimeWarningPeriod()));
        timeSoundComboBox.setSelectedIndex(settings.getPlayClockSound());
        soundSystemCheckBox.setSelected(settings.getSimpleSound());
        saveIGSLocationCheckBox.setSelected(settings.getStoreLocation());
        saveIGSSizeCheckBox.setSelected(settings.getStoreSize());
        localeComboBox.setSelectedIndex(settings.getLocale() + 1);
        fixWindowsFontsCheckBox.setSelected(settings.getFixWindowsFont());
        igsDisplayInfoCheckBox.setSelected(settings.getIGSDisplayInfo());
        igsDisplayMovesCheckBox.setSelected(settings.getIGSDisplayMoves());
    }

    /**  Apply the dialog element settings */
    private void acceptChanges() {
        settings.setThemePack(selectedTheme);
        settings.setLookAndFeel(styleComboBox.getSelectedIndex());
        settings.setShowSidebar(showSidebarCheckBox.isSelected());
        settings.setSidebarLayout(sidebarLeftRadioButton.isSelected() ? SIDEBAR_WEST : SIDEBAR_EAST);
        settings.setShowToolbar(showToolbarCheckBox.isSelected());
        settings.setShowStatusbar(showStatusbarCheckBox.isSelected());
        settings.setShowSlider(showSliderCheckBox.isSelected());
        settings.setShowCoords(showCoordsCheckBox.isSelected());
        settings.setShowCursor(showCursorCheckBox.isSelected());
        settings.setShowVariationGhosts(showVarGhostsCheckBox.isSelected());
        settings.setShowHorizontalComment(showHorizontalCommentCheckBox.isSelected());
        settings.setPlayClickSound(playClickSoundCheckBox.isSelected());
        settings.setDoRemDir(remDirCheckBox.isSelected());
        settings.setGnugoPath(gnugoPathTextField.getText());
        settings.setGnugoArgs(gnugoArgsTextField.getText());
        settings.setServerDisabled(disableServerCheckBox.isSelected());
        settings.setServerPort(Utils.convertStringToInt(serverPortTextField.getText()));
        settings.setAntiSlip(antiSlipCheckBox.isSelected());
        settings.setAntiSlipDelay(Utils.convertStringToInt(antiSlipDelayTextField.getText()));
        settings.setSerifFontSize(Utils.convertStringToInt(serifFontSizeTextField.getText()));
        settings.setSansSerifFontSize(Utils.convertStringToInt(sansSerifFontSizeTextField.getText()));
        settings.setMonospacedFontSize(Utils.convertStringToInt(monospacedFontSizeTextField.getText()));
        settings.setIGSChatterType(igsChatterTypeComboBox.getSelectedIndex());
        settings.setClickType(clickTypeComboBox.getSelectedIndex());
        settings.setTimeWarningPeriod(Utils.convertStringToInt(timeTextField.getText()));
        settings.setPlayClockSound(timeSoundComboBox.getSelectedIndex());
        settings.setSimpleSound(soundSystemCheckBox.isSelected());
        settings.setStoreLocation(saveIGSLocationCheckBox.isSelected());
        settings.setStoreSize(saveIGSSizeCheckBox.isSelected());
        settings.setLocale(localeComboBox.getSelectedIndex() - 1);
        settings.setFixWindowsFont(fixWindowsFontsCheckBox.isSelected());
        settings.setIGSDisplayInfo(igsDisplayInfoCheckBox.isSelected());
        settings.setIGSDisplayMoves(igsDisplayMovesCheckBox.isSelected());
        result = true;
    }

    public boolean getResult() {
        return result;
    }

    private DefaultComboBoxModel getAvailableLookAndFeels() {
        return new DefaultComboBoxModel(new String[] { board_resources.getString("System_default"), "Java", "Windows", "Skin", "Kunststoff", "Metouia", "Motif", "Mac" });
    }

    private DefaultComboBoxModel getAvailableLocales() {
        final int sz = supportedLocales.length + 1;
        String[] availableLocales = new String[sz];
        availableLocales[0] = board_resources.getString("System_default");
        for (int i=1; i<sz; i++)
            availableLocales[i] = supportedLocales[i-1].getDisplayName();
        return new DefaultComboBoxModel(availableLocales);
    }

    private DefaultComboBoxModel getIGSClickTypes() {
        return new DefaultComboBoxModel(new String[] {
            board_resources.getString("click_type_single_click"),
            board_resources.getString("click_type_double_click")
        });
    }

    private DefaultComboBoxModel getIGSChatterTypes() {
        return new DefaultComboBoxModel(new String[] {
            board_resources.getString("chat_type_desktop_pane"),
            board_resources.getString("chat_type_single_window")
        });
    }

    private DefaultComboBoxModel getSoundWarningTypes() {
        return new DefaultComboBoxModel(new String[] {
            board_resources.getString("sound_warning_no_sound"),
            board_resources.getString("sound_warning_play_once"),
            board_resources.getString("sound_warning_play_loop")
        });
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new PreferencesDialog(new javax.swing.JFrame(), false, new Settings());
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox igsDisplayMovesCheckBox;
    private javax.swing.JButton resetThemeButton;
    private javax.swing.JTextField serverPortTextField;
    private javax.swing.JTextField sansSerifFontSizeTextField;
    private javax.swing.JCheckBox showToolbarCheckBox;
    private javax.swing.JRadioButton sidebarRightRadioButton;
    private javax.swing.JCheckBox remDirCheckBox;
    private javax.swing.JCheckBox showSliderCheckBox;
    private javax.swing.JCheckBox showCursorCheckBox;
    private javax.swing.JCheckBox showHorizontalCommentCheckBox;
    private javax.swing.JTextField gnugoArgsTextField;
    private javax.swing.JComboBox timeSoundComboBox;
    private javax.swing.JCheckBox showSidebarCheckBox;
    private javax.swing.JCheckBox soundSystemCheckBox;
    private javax.swing.JTextField timeTextField;
    private javax.swing.JComboBox clickTypeComboBox;
    private javax.swing.JCheckBox showStatusbarCheckBox;
    private javax.swing.JTextField monospacedFontSizeTextField;
    private javax.swing.JButton selectThemeButton;
    private javax.swing.JCheckBox saveIGSLocationCheckBox;
    private javax.swing.JCheckBox showCoordsCheckBox;
    private javax.swing.JCheckBox antiSlipCheckBox;
    private javax.swing.JComboBox igsChatterTypeComboBox;
    private javax.swing.JButton resetDefaultsButton;
    private javax.swing.JCheckBox igsDisplayInfoCheckBox;
    private javax.swing.JRadioButton sidebarLeftRadioButton;
    private javax.swing.JCheckBox showVarGhostsCheckBox;
    private javax.swing.JTextField antiSlipDelayTextField;
    private javax.swing.JComboBox localeComboBox;
    private javax.swing.JCheckBox playClickSoundCheckBox;
    private javax.swing.JLabel antiSlipDelayLabel;
    private javax.swing.JLabel themeLabel;
    private javax.swing.JTextField gnugoPathTextField;
    private javax.swing.JTextField serifFontSizeTextField;
    private javax.swing.JCheckBox fixWindowsFontsCheckBox;
    private javax.swing.JComboBox styleComboBox;
    private javax.swing.JCheckBox disableServerCheckBox;
    private javax.swing.JCheckBox saveIGSSizeCheckBox;
    // End of variables declaration//GEN-END:variables

    class KeyHandler extends KeyAdapter {
        public void keyPressed(KeyEvent e) {
            if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {
                result = false;
                setVisible(false);
                dispose();
            }
        }
    }
}
